using System;
using System.Collections.Generic;

namespace Discore.Http
{
    /// <summary>
    /// Represents a message sent in a channel within Discord.
    /// </summary>
    public class DiscordMessage : DiscordIdObject
    {
        /// <summary>
        /// Gets the id of the channel this message was sent in.
        /// </summary>
        public Snowflake ChannelId { get; }
        /// <summary>
        /// Gets the author of this message.
        /// </summary>
        public DiscordUser Author { get; }
        /// <summary>
        /// Gets the contents of this message.
        /// </summary>
        public string Content { get; }
        /// <summary>
        /// Gets the time this message was first sent.
        /// </summary>
        public DateTime Timestamp { get; }
        /// <summary>
        /// Gets the time of the last edit to this message.
        /// </summary>
        public DateTime? EditedTimestamp { get; }
        /// <summary>
        /// Gets whether or not this message was sent with the /tts command.
        /// </summary>
        public bool TextToSpeech { get; }
        /// <summary>
        /// Gets whether or not this message mentioned everyone via @everyone.
        /// </summary>
        public bool MentionEveryone { get;  }
        /// <summary>
        /// Gets a list of all user-specific mentions in this message.
        /// </summary>
        public DiscordUser[] Mentions { get; }
        /// <summary>
        /// Gets a list of all roles mentioned in this message.
        /// </summary>
        public Snowflake[] MentionedRoles { get; }
        /// <summary>
        /// Gets a table of all attachments in this message.
        /// </summary>
        public DiscordAttachment[] Attachments { get; }
        /// <summary>
        /// Gets a list of all embedded attachments in this message.
        /// </summary>
        public DiscordEmbed[] Embeds { get; }
        /// <summary>
        /// Used for validating if a message was sent.
        /// </summary>
        public Snowflake? Nonce { get; }
        /// <summary>
        /// Gets whether or not this message is pinned in the containing channel.
        /// </summary>
        public bool IsPinned { get; }
        /// <summary>
        /// Gets the id of the webhook this message was generated from,
        /// or null if this message was not generated by a webhook.
        /// </summary>
        public Snowflake? WebhookId { get; }

        // TODO: add reactions

        public DiscordMessage(DiscordApiData data)
            : base(data)
        {
            Content         = data.GetString("content");
            Timestamp       = data.GetDateTime("timestamp").Value;
            EditedTimestamp = data.GetDateTime("edited_timestamp").Value;
            TextToSpeech    = data.GetBoolean("tts").Value;
            MentionEveryone = data.GetBoolean("mention_everyone").Value;
            Nonce           = data.GetSnowflake("nonce");
            IsPinned        = data.GetBoolean("pinned").Value;
            ChannelId       = data.GetSnowflake("channel_id").Value;
            WebhookId       = data.GetSnowflake("webhook_id");

            DiscordApiData authorData = data.Get("author"); // TODO: may be an issue if the author is a webhook.
            Author = new DiscordUser(authorData);

            // Get mentions
            IList<DiscordApiData> mentionsData = data.GetArray("mentions");
            Mentions = new DiscordUser[mentionsData.Count];

            for (int i = 0; i < mentionsData.Count; i++)
                Mentions[i] = new DiscordUser(mentionsData[i]);

            // Get mentioned roles
            IList<DiscordApiData> mentionRolesData = data.GetArray("mention_roles");
            MentionedRoles = new Snowflake[mentionRolesData.Count];

            for (int i = 0; i < mentionRolesData.Count; i++)
                MentionedRoles[i] = mentionRolesData[i].ToSnowflake().Value;

            // Get attachments
            IList<DiscordApiData> attachmentsData = data.GetArray("attachments");
            Attachments = new DiscordAttachment[attachmentsData.Count];

            for (int i = 0; i < attachmentsData.Count; i++)
                Attachments[i] = new DiscordAttachment(attachmentsData[i]);

            // Get embeds
            IList<DiscordApiData> embedsData = data.GetArray("embeds");
            Embeds = new DiscordEmbed[embedsData.Count];

            for (int i = 0; i < embedsData.Count; i++)
                Embeds[i] = new DiscordEmbed(embedsData[i]);
        }
    }
}
