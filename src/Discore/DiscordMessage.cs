using System;
using System.Collections.Generic;
using System.Text.Json;

#nullable enable

namespace Discore
{
    /// <summary>
    /// Represents a message sent in a channel within Discord.
    /// </summary>
    public sealed class DiscordMessage : DiscordIdEntity
    {
        public const int MAX_CHARACTERS = 2000;

        /// <summary>
        /// Gets the ID of the channel this message is in.
        /// </summary>
        public Snowflake ChannelId { get; }
        /// <summary>
        /// Gets the ID of the guild this message is in.
        /// </summary>
        public Snowflake? GuildId { get; }
        /// <summary>
        /// Gets the author of this message.
        /// </summary>
        public DiscordUser Author { get; }
        /// <summary>
        /// If this message originated from a guild, gets the member properties of the author.
        /// <para/>
        /// Only available if this message originated from a MessageCreate or MessageUpdate Gateway event.
        /// </summary>
        public DiscordMessageMember? Member { get; }
        /// <summary>
        /// Gets the contents of this message.
        /// </summary>
        public string Content { get; }
        /// <summary>
        /// Gets the time this message was first sent.
        /// </summary>
        public DateTime Timestamp { get; }
        /// <summary>
        /// Gets the time of the last edit to this message.
        /// </summary>
        public DateTime? EditedTimestamp { get; }
        /// <summary>
        /// Gets whether or not this message was sent with the /tts command.
        /// </summary>
        public bool TextToSpeech { get; }
        /// <summary>
        /// Gets whether or not this message mentioned everyone via @everyone.
        /// </summary>
        public bool MentionEveryone { get; }
        // TODO: Make DiscordUserMention and add optional member field, see https://discordapp.com/developers/docs/resources/channel#message-object-message-structure
        /// <summary>
        /// Gets a list of all user-specific mentions in this message.
        /// </summary>
        public IReadOnlyList<DiscordUser> Mentions { get; }
        /// <summary>
        /// Gets a list of all the IDs of mentioned roles in this message.
        /// </summary>
        public IReadOnlyList<Snowflake> MentionedRoleIds { get; }
        /// <summary>
        /// Gets a list of all channels mentioned in this message.
        /// <para/>
        /// Note: This will only ever be populated for crossposted messages.
        /// </summary>
        public IReadOnlyList<DiscordChannelMention> MentionedChannels { get; }
        /// <summary>
        /// Gets a list of all attachments in this message.
        /// </summary>
        public IReadOnlyList<DiscordAttachment> Attachments { get; }
        /// <summary>
        /// Gets a list of all embedded attachments in this message.
        /// </summary>
        public IReadOnlyList<DiscordEmbed> Embeds { get; }
        /// <summary>
        /// Gets a list of all reactions to this message.
        /// </summary>
        public IReadOnlyList<DiscordReaction> Reactions { get; }
        /// <summary>
        /// Used for validating if a message was sent.
        /// </summary>
        public Snowflake? Nonce { get; }
        /// <summary>
        /// Gets whether or not this message is pinned in the containing channel.
        /// </summary>
        public bool IsPinned { get; }
        /// <summary>
        /// If this message was generated by a webhook, gets the ID of that webhook.
        /// </summary>
        public Snowflake? WebhookId { get; }
        /// <summary>
        /// Gets the type of message.
        /// </summary>
        public DiscordMessageType Type { get; }
        /// <summary>
        /// Gets the activity information for a Rich Presence-related chat message.
        /// </summary>
        public DiscordMessageActivity? Activity { get; }
        /// <summary>
        /// Gets the application information for a Rich Persence-related chat message.
        /// </summary>
        public DiscordMessageApplication? Application { get; }
        /// <summary>
        /// Gets the reference data sent with crossposted messages.
        /// </summary>
        public DiscordMessageReference? MessageReference { get; }
        /// <summary>
        /// Flags describing extra features of the message.
        /// </summary>
        public DiscordMessageFlags Flags { get; }

        internal DiscordMessage(JsonElement json)
            : base(json)
        {
            ChannelId = json.GetProperty("channel_id").GetSnowflake();
            GuildId = json.GetPropertyOrNull("guild_id")?.GetSnowflake();
            Author = new DiscordUser(json.GetProperty("user"));
            Content = json.GetProperty("content").GetString();
            Timestamp = json.GetProperty("timestamp").GetDateTime();
            EditedTimestamp = json.GetProperty("edited_timestamp").GetDateTimeOrNull();
            TextToSpeech = json.GetProperty("tts").GetBoolean();
            MentionEveryone = json.GetProperty("mention_everyone").GetBoolean();
            Nonce = json.GetPropertyOrNull("nonce")?.GetSnowflakeOrNull();
            IsPinned = json.GetProperty("pinned").GetBoolean();
            WebhookId = json.GetPropertyOrNull("webhook_id")?.GetSnowflake();
            Type = (DiscordMessageType)json.GetProperty("type").GetInt32();
            Flags = (DiscordMessageFlags)(json.GetPropertyOrNull("flags")?.GetInt32() ?? 0);

            // Get member
            if (json.TryGetProperty("member", out JsonElement memberData))
                Member = new DiscordMessageMember(memberData);

            // Get activity
            if (json.TryGetProperty("activity", out JsonElement activityData))
                Activity = new DiscordMessageActivity(activityData);

            // Get application
            if (json.TryGetProperty("application", out JsonElement applicationData))
                Application = new DiscordMessageApplication(applicationData);

            // Get message reference
            if (json.TryGetProperty("message_reference", out JsonElement messageReferenceData))
                MessageReference = new DiscordMessageReference(messageReferenceData);

            // Get mentions
            JsonElement mentionsData = json.GetProperty("mentions");
            var mentions = new DiscordUser[mentionsData.GetArrayLength()];

            for (int i = 0; i < mentions.Length; i++)
                mentions[i] = new DiscordUser(mentionsData[i]);

            Mentions = mentions;

            // Get mentioned roles
            JsonElement mentionRolesData = json.GetProperty("mention_roles");
            var mentionRoles = new Snowflake[mentionRolesData.GetArrayLength()];

            for (int i = 0; i < mentionRoles.Length; i++)
                mentionRoles[i] = mentionsData[i].GetSnowflake();

            MentionedRoleIds = mentionRoles;

            // Get mentioned channels
            if (json.TryGetProperty("mention_channels", out JsonElement mentionChannelsData))
            {
                var mentionChannels = new DiscordChannelMention[mentionChannelsData.GetArrayLength()];

                for (int i = 0; i < mentionChannels.Length; i++)
                    mentionChannels[i] = new DiscordChannelMention(mentionChannelsData[i]);

                MentionedChannels = mentionChannels;
            }
            else
            {
                MentionedChannels = new DiscordChannelMention[0];
            }

            // Get attachments
            JsonElement attachmentsData = json.GetProperty("attachments");
            var attachments = new DiscordAttachment[attachmentsData.GetArrayLength()];

            for (int i = 0; i < attachments.Length; i++)
                attachments[i] = new DiscordAttachment(attachmentsData[i]);

            Attachments = attachments;

            // Get embeds
            JsonElement embedsData = json.GetProperty("embeds");
            var embeds = new DiscordEmbed[embedsData.GetArrayLength()];

            for (int i = 0; i < embeds.Length; i++)
                embeds[i] = new DiscordEmbed(embedsData[i]);

            Embeds = embeds;

            // Get reactions
            if (json.TryGetProperty("reactions", out JsonElement reactionsData))
            {
                var reactions = new DiscordReaction[reactionsData.GetArrayLength()];

                for (int i = 0; i < reactions.Length; i++)
                    reactions[i] = new DiscordReaction(reactionsData[i]);

                Reactions = reactions;
            }
            else
            {
                Reactions = new DiscordReaction[0];
            }
        }
    }
}

#nullable restore
